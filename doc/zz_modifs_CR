A FAIRE

echo -->built in
l 53	remplacer 	printf("");
		par : 		write(1, "", 0);
		
----------------------------------------
----- Modifs en cours - A PARTAGER -----
----------------------------------------

> sort the headers in alphabetical order in minishell.h
	+ ajout de LST_BIN
	+ code de ft_malloc pour chaque sizeof
	+ fonctions lists pour
		- lstadd_front
		- lstfree
		...
> ft_new_strchr --> car incorrect pour / tout seul et toto/ ...

> base pour branch CR_ft_malloc2

	WIP - penser à mettre des ** et pas des * ?!?!

  Dans minishell.h :
	[x] Création d'un enum additionnel pour lister les types de sizeof
	[x] Création d'une nouvelle variable "struct t_bin"
	[x] Ajout de cette nouvelle variable 'bin' dans t_data *data pour ce "garbage collector" en liste chainée (init à NULL)
	[ ] Ajout de la liste des fonctions crées ci-dessous dans le prototypes

  Sous le dossie srcs :
	[x] Création d'un dossier "bin_collect" contenant les fichiers :
		[x] "bin_coll.c" qui va contenir :
			[ ] la fonction 'ft_malloc': qui malloc selon les données transmises + ajoute 1 maillon à chaque malloc OK
			[ ] la fonction 'ft_get_sizeof: pour récupérer le bon sizeof qui sera utilisé dans ft_malloc
		[x] "bin_list.c" qui regroupe les fonctions usuelles de listes chainées :
			[ ] ft_lstadd_bin
			[ ] ft_lstlast_bin
			[ ] ft_lstclear_bin
			[ ] ft_lstdelone_bin
			[ ] ft_free_bin

  Dans le Makefile :
	[x] Ajout des fichiers/folders

  Dans minishell.c :
	[x] Ajout dans la fonction qui initialise data (ft_init_data_0) de minishell.c : une init de bin à NULL



A REVOIR / RELIRE

		--> /!\ /!\ /!\ /!\ /!\ /!\ /!\
		A AJUSTER POUR CHAQUE MALLOC !!
		+ CHECKER POUR CHAQUE PROCESS (fork()), quand on exit (surtout pour les child) ou on return...

Check des mallocs dans l'ordre des fonctions :
- 	ft_get_env(char **envp) dans parser/env.c
		--> modif des paramètres, ajout de data
		==> A FINALISER pour la sortie (pb de malloc donc on ne continue pas)
-	ft_lstadd_env(t_env **env, char *envp)
		--> modif des paramètres, ajout de data
		==> A FINALISER pour la sortie (pb de malloc donc on ne continue pas)
-	ft_substr()
		--> ajout dans utils2.c d'une fonction ft_substr_malloc
			pour modifier les malloc/check
-	ft_strdup()
		--> ajout dans utils2.c d'une fonction ft_strdup_malloc
			pour modifier les malloc/check
-	ft_built_in()
		--> modif des paramètres et de la fonction
		--> quitte directement si erreur
		==> A FINALISER pour la sortie (pb de malloc donc on ne continue pas)
-	ft_split()
		==> /!\ A FINALISER (WIP) /!\


----------------------------------------------------
----- modifs ci-dessous - COMMITED + PUSHED OK -----
----------------------------------------------------

> cf. branch CR_27sept

> Pour "EXPORT" la variable PATH, PROPOSITION:
	--> util de ft_strncmp
	--> si PATH= ==> free le env_path et rappeler la fonction ft_get_env_path
	/!\ pour ft_get_env_path : MODIFIER ET UTILISER LA LISTE CHAINEE ENV AU LIEU DE CHAR *ENVP
	/!\ récupérer s_env_path dans ft_get_env_path (= tab_path)
		--> cela évite une redite (fonction 'ft_get_str_env_path' inutile)
			et permet de mettre à jour en même temps s_env_path

==> code modifié en commentaire - A TESTER :
	1. dans le fichier export.c (dossier built-in) :
		- activer la partie de mise à jour du PATH (ligne 58 et suiv.)
	2. dans le fichier env_path.c (dossier exec - ICI)
		- commenter toute la première partie (les 4 fonctins)
		+ "dé-commenter" les fonctions réécrites tout en bas (2e partie)
			--> plus que 2 fonctions ^^
	3. dans le fichier .h :
		- mettre à jour la partie env_path (ligne 115 et suiv.)
	4. dans la fonction ft_child_process du ficher exec.c :
		- commenter la partie s_env_path (ligne 193 et suiv.)
	5. dans la fonction ft_init_data_1 du fichier minishell.c :
		- modifier le prototype ft_get_env_path(data), sans le envp (lignes 77-78)


> Correction de la fonction ft_export
	- pour le check du 'name' de la variable (avant le =)
	- pour la data->val_exit
	+ raccourcissement de la fonction
	- ajout du cas '_=...' qui ne modifie pas la variable '_'

> Ajout dans le fichier 'env_path.c' : de la variable 'var_equal' pour t_env env_path (fait dans env mais pas ici)
	- dans lstadd2

> Dans type_token.c (parser) au niveau de la fonction 'ft_type_token()'
	- modification du paramètre "3" par "ft_strlen(token->token)" dans la fonction "ft_strncmp" de la condition de la boucle while, dans le cas où il s'agit d'un built-in 'env' (vers la ligne 138)
-----

> Création de fonctions 'init' dans le fichier 'minishell.c'
	- pour initialiser toutes les données de data par défaut
	- puis pour découper, regrouper & protéger l'initialisation (obj réduire la fonction 'main')

	--> en regard de la partie 'init': création de fonctions pour la partie 'clean/free' de data (toujours dans minishell)

> Dans le folder "parser" : création d'un fichier 'parser.c' pour regrouper toutes les fonctions parcourues du parsing
	--> déplacement des fonctions de minishell.c dans ce fichier parser.c sous le nom de fonction 'ft_parser(t_data *data)'

> Création d'un autre file "cmd_list.c" pour y rassembler les fonctions de liste chainée:
	- int	ft_lstadd_cmd(t_cmd **cmd, char *cmdline)
	- t_cmd	*ft_lstlast_cmd(t_cmd *lst)
	- void	ft_free_cmd(t_cmd **cmd)
	- void	ft_lstdelone_cmd(t_cmd *node)

> Modification dans le file "get_commands.c"
	- nom "ft_get_cmdline()" remplacé par "ft_get_raw_cmd()" (y.c. dans .h)
		+ cmdline remplacé par cmd (dans cette fonction)
	- déplacement des fonctions de linked list vers le file "cmd_list.c"
	- ajout de commentaires sur les principales fonctions
	- ajout "static" pour les fonctions "ft_get_pipe()" et "ft_next_pipe()"
	- ajout des dprintf pour afficher la raw_cmd et sa len

> Modification dans le file "del_spaces.c"
	- ajout de commentaires sur les 3 fonctions
	- modif dprintf pour afficher les len

> Modification dans le file "get_redir.c"
	- ajout de commentaires sur les 3 principales fonctions (et pas les tok_redir)
	- modif dprintf pour afficher les len
	- correction des 'invalid read' pour le cas où on atteint un ' ' à la fin d'un file, il faut refaire i-- (comme pour les chevrons)
		ex: lancer valgrind avec pour "t">>super"top"  --> invalid read sur ft_len_no_redir()
	--> modif des len, fill et get redir list pour :
		- prendre en compte le cas où il y a plusieurs textes entre "" après une redirection (pour le moment le 1er seulement est pris en compte)
			et faire une boucle
		- mettre le type à 0 à chaque fin de boucle (get_redir_list)
		- ne pas supprimer les espaces après la redirection dans le cas où il n'y en avait pas avant (sinon, les token se collent)
			et plutôt nettoyer les espaces dans del_quotes ou avant... dans le del_dolls

			cf. cas :
			problemes d'espaces si on retire les redirections
			--> mieux vaut ne pas enlever les espaces lors de get_redir et nettoyer par la suite les espaces
			(car ce seront des espaces hors quotes et donc pas en négatif...)
			sinon, le risque est d'avoir 2 token collés (car plus de redir entre...)
			tests:
				"coucou">"tut""tot">>test 'abcd $? eee'
				"coucou" >'tut' >> test 'youpi'

> Modification dans le file "del_dolls.c"
	- ajout de commentaires sur les principales fonctions
	- ajout du nettoyage des espaces suites au redirections (len & fill)
	- modifier le nom : undoll_len en len pour la fonction principale (même modèle que del_spaces, get_redir...)

> Modification dans le file "del_quotes"
	- modifier le nom : unquote_cmd_len en len pour la fonction principale (même modèle que del_spaces, get_redir, del_dolls...)
	- WIP

> PAS DE MODIF dans le file "expand.c" (pas eu le temps de re-regarder)

> Modification dans le file "token_2.c"
	- ajustements sur la fonction ft_get_token(t_cmd *cmd)
	- ajout de '/**/' pour le printf de la linked list
